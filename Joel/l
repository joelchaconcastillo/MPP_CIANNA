3c3
< #include "MPP.h"
---
> #include "MPP2.h"
11c11
< MPP::MPP(){ }
---
> MPP2::MPP2(){ }
55c55
< void MPP::calculateFeasibilityDegree(){
---
> void MPP2::calculateFeasibilityDegree(){
108c108
< void MPP::evaluate(){
---
> void MPP2::evaluate(){
118,119c118,119
< Individual *MPP::clone() const {
< 	MPP *newInd = new MPP();
---
> Individual *MPP2::clone() const {
> 	MPP2 *newInd = new MPP2();
128,129c128,129
< bool MPP::init(const vector<string> &params){//Dias Cruce
< 	if (params.size() != 2) { cerr << "Error parametros de MPP incorrectos" << endl; return false;}
---
> bool MPP2::init(const vector<string> &params){//Dias Cruce
> 	if (params.size() != 2) { cerr << "Error parametros de MPP2 incorrectos" << endl; return false;}
136,137d135
< 	} else if (crossover == "Uniform2"){
< 		crossoverType = UNIFORM2_CROSSOVER;
144,146c142,144
< 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP/instancias/postres.txt", v_postres);
< 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP/instancias/primerosplatos.txt", v_primerosPlatos); 
< 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP/instancias/segundosplatos.txt", v_segundosPlatos);
---
> 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP2/instancias/postres.txt", v_postres);
> 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP2/instancias/primerosplatos.txt", v_primerosPlatos); 
> 	set_VectoresPlatos("/home/carlos.segura/svn/oplink/algorithms/team/src/plugins/problems/MPP2/instancias/segundosplatos.txt", v_segundosPlatos);
150c148
< void MPP::restart(){
---
> void MPP2::restart(){
168c166
< void MPP::dependentCrossover(Individual *i2){
---
> void MPP2::dependentCrossover(Individual *i2){
173,174d170
< 	} else if (crossoverType == UNIFORM2_CROSSOVER){
< 		uniform2Crossover(i2);
178c174
< void MPP::uniformCrossover(Individual *i2){
---
> void MPP2::uniformCrossover(Individual *i2){
188,196c184
< void MPP::uniform2Crossover(Individual *i2){
< 	for (int i = 0; i < nDias * 3; i++){
< 		if (rand() > (RAND_MAX / 2)){
< 			swap(var[i], i2->var[i]);
< 		} 
< 	}
< }
< 
< void MPP::pairBasedCrossover(Individual *i2){
---
> void MPP2::pairBasedCrossover(Individual *i2){
256c244
< void MPP::dependentMutation(double pm){
---
> void MPP2::dependentMutation(double pm){
263c251
< void MPP::localSearch( ) {
---
> void MPP2::localSearch( ) {
278c266
< 	for (int i = 0; i < 100; i++){
---
> 	for (int i = 0; i < 20; i++){
343c331
< double MPP::getDistance(Individual &ind2) {
---
> double MPP2::getDistance(Individual &ind2) {
370c358
< void MPP::print(ostream &os) const {
---
> void MPP2::print(ostream &os) const {
